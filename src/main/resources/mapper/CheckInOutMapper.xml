<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.checkin.mapper.CheckInOutMapper">
    <update id="updateCheckOut" parameterType="string">
        UPDATE check_in_out
        SET
            check_out = NOW()
        WHERE id = #{id}::uuid
    </update>

    <update id="updateTime"  parameterType="com.example.checkin.model.request.CheckInOutRequest">
        UPDATE check_in_out
        SET
            work_time = check_out - check_in,
            late = check_in - #{startTime}::time,
            soon = #{endTime}::time - check_out,
            status = #{status}
        WHERE id = #{id}::uuid;
    </update>

    <select id="getCheckOutById" parameterType="com.example.checkin.model.request.CheckInOutRequest"
            resultType="com.example.checkin.model.response.CheckInOutResponse">
        SELECT *
        FROM check_in_out
        WHERE TO_CHAR("date", 'yyyy-mm-dd') = #{date} AND employee_id = #{employeeId}::uuid
    </select>

    <select id="get" parameterType="com.example.checkin.model.request.CheckInOutRequest"
            resultType="com.example.checkin.model.response.CheckInOutResponse">
        SELECT
            employee.code AS code,
            employee.name AS name,
            employee.room AS room,
            employee.unit AS unit,
            TO_CHAR(date, 'dd-MM-yyyy')as date,
            TO_CHAR(check_in, 'hh24:mi:ss')as check_in,
            TO_CHAR(check_out, 'hh24:mi:ss')as check_out,
            TO_CHAR(work_time, 'hh24:mi:ss')as work_time,
            TO_CHAR(late, 'hh24:mi:ss')as late,
            TO_CHAR(soon, 'hh24:mi:ss')as soon,
            check_in_out.status,
            check_in_out.id,
            check_in_out.employee_id
        FROM check_in_out
        LEFT JOIN employee ON check_in_out.employee_id = employee.id
        LEFT JOIN user_account ON employee.account_id = user_account.id
        <where>
            <if test="room != null and room !=''">
                and employee.room ILIKE CONCAT('%' || #{room} || '%')
            </if>
            <if test="date != null and date !=''">
                and check_in_out.date = #{date}
            </if>
            <if test="unit != null and unit !=''">
                and employee.unit ILIKE CONCAT('%' || #{unit} || '%')
            </if>
            <if test="code != null and code !=''">
                and employee.code = #{code}
            </if>
            <if test="status != null and status !=''">
                and check_in_out.status ILIKE CONCAT('%' || #{status} || '%')
            </if>
            <if test="employeeId != null and employeeId !=''">
                and user_account.id = #{employeeId}::uuid
            </if>
        </where>

        ORDER BY check_in_out.date DESC
        <if test="limit > 0">
            OFFSET (#{page} - 1) * #{limit} FETCH NEXT #{limit} ROWS ONLY
        </if>
    </select>

    <select id="create" parameterType="com.example.checkin.model.request.CheckInOutRequest"
            resultType="com.example.checkin.model.response.CheckInOutResponse">
        INSERT INTO check_in_out(
            date,
            check_in,
            status,
            employee_id
        )VALUES (
            NOW(),
            NOW(),
            #{status},
            #{employeeId}
        ) RETURNING *;
    </select>

    <select id="countCheckInOut" parameterType="com.example.checkin.model.request.CheckInOutRequest"
            resultType="java.lang.Integer">
        SELECT COUNT(*) FROM check_in_out
        LEFT JOIN employee ON check_in_out.employee_id = employee.id
        LEFT JOIN user_account ON employee.account_id = user_account.id
        <where>
            <if test="room != null and room !=''">
                and employee.room ILIKE CONCAT('%' || #{room} || '%')
            </if>
            <if test="date != null and date !=''">
                and check_in_out.date = #{date}
            </if>
            <if test="unit != null and unit !=''">
                and employee.unit ILIKE CONCAT('%' || #{unit} || '%')
            </if>
            <if test="code != null and code !=''">
                and employee.code = #{code}
            </if>
            <if test="status != null and status !=''">
                and check_in_out.status ILIKE CONCAT('%' || #{status} || '%')
            </if>
            <if test="employeeId != null and employeeId !=''">
                and user_account.id = #{employeeId}::uuid
            </if>
        </where>
    </select>
    <select id="countLateCheckIn" parameterType="com.example.checkin.model.request.CheckInOutRequest"
            resultType="java.lang.Integer">
        SELECT COUNT(*) AS countLate
        FROM check_in_out
        WHERE TO_CHAR(date, 'yyyy-MM') = CONCAT(CAST(EXTRACT(YEAR FROM CURRENT_DATE) AS VARCHAR) || '-' || #{month})
          AND  late > '00:05:00'::time
    </select>
</mapper>